# -*- coding: utf-8 -*-
"""book_recommendation_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VbZCZq5qug4HJpRZygmZIPTJBtEIzoic
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

df = df_ratings
counts1 = df['user'].value_counts()
counts2 = df['isbn'].value_counts()
df = df[~df['user'].isin(counts1[counts1 < 200].index)]
df = df[~df['isbn'].isin(counts2[counts2 < 100].index)]
df = pd.merge(right=df, left = df_books, on="isbn")
df = df.drop_duplicates(["title", "user"])
piv = df.pivot(index='title', columns='user', values='rating').fillna(0)
matrix = piv.values

# add your code here - consider creating a new cell for each section of code
from sklearn.neighbors import NearestNeighbors

#The choice of the 'brute' algorithm for nearest neighbor search is appropriate when the dataset is relatively small or when the simplicity and flexibility of the algorithm outweigh its computational inefficiency.
#For larger datasets, more efficient algorithms such as 'kd_tree' or 'ball_tree' are often preferred.

model_knn=NearestNeighbors(metric='cosine',algorithm='brute')
#In book recommendation systems, using the metric='cosine' can be beneficial because it allows the system to find similarities between books based on their content or features.
#Content-Based Recommendation: In content-based recommendation systems, books are often represented as vectors based on their attributes (e.g., genre, author, keywords).
#The cosine similarity metric measures the cosine of the angle between these vectors, indicating their similarity in terms of content.

#Sparse Data: Book recommendation data is often sparse, with many books having only a subset of attributes or features.
#The cosine similarity is well-suited for sparse data because it only considers the non-zero dimensions of the vectors, effectively ignoring missing or irrelevant features.

#If the metric parameter is not specified, the default distance metric used is 'minkowski' with p=2, which corresponds to the Euclidean distance.
#You can also specify other distance metrics supported by scikit-learn, such as 'manhattan' (L1 distance) or 'chebyshev' (maximum coordinate difference).
model_knn.fit(matrix)

# function to return recommended books - this will be tested
def get_recommends(book = ""):
  x=piv.loc[book].array.reshape(1, -1)
  distances,indices=model_knn.kneighbors(x,n_neighbors=6)
  R_books=[]
  for distance,indice in zip(distances[0],indices[0]):
    if distance!=0:
      R_book=piv.index[indice]
      R_books.append([R_book,distance])
  recommended_books=[book,R_books[::-1]]
  return recommended_books

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()